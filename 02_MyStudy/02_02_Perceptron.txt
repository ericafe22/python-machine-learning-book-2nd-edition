
★ PerceptronのMEMO

class Perceptron(object):

    ★etaは学習率：0.0〜1.0の値を取る(P41)
    ★n_iterはエポック数：反復で重みを更新する回数を指定する
    def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state

    def fit(self, X, y):

        ★重みの初期値を設定(正規分布や平均、標準偏差などを設定)
        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])
        print("self.w_")
        print(self.w_)
        self.errors_ = []

        for _ in range(self.n_iter):
            ★間違って判定した数を格納
            errors = 0
            for xi, target in zip(X, y):
                ★正しく判定→0
                ★誤って判定→学習率×(正解-予測値) (例)0.1 * (1-(-1)) = 0.2
                update = self.eta * (target - self.predict(xi))
                ★重みを更新：初期値+(update * Xの値)
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self, X):
        ★総入力を計算
        return np.dot(X, self.w_[1:]) + self.w_[0]

    def predict(self, X):
        ★総入力がプラスならクラス1判定
        ★総入力がマイナスならクラス-1判定
        return np.where(self.net_input(X) >= 0.0, 1, -1)